1.File=/etc/fstab
{
   read line1 
   read line2
} <$File
2. \< ,\>正则表达式中的单词边界:$grep '\<the\>' textfile
3.$tar -cf - . |(cd ../dest/directory:tar xpvf -)
4.hello="A B   C   D"
  $echo $hello    #A B C D
  $echo "$hello"   #A B    C    D
 引用一个变量将保留其中的空白，当然，如果是变量替换就不会保留了。
5.#!/bin/bash  echo "The name of is \"`basename $0`\"."
  The name of is "48.sh."
6.$ tail /etc/psswd |sort -t ':' -k 3 -n    ;-t:分隔符， -k 第几个值  ，-n 数字排序，-r 反序，-d 按字典序进行排序。
7.if [ $# -lt 3 ]; then
cat <<HELP
 ren --renames a number of files using sed regular 
  USAGE:ren 'regexp' 'replacement' files....
  EXAMPLE :rename all
HELP
  exit 0
fi
8. find . \( -name "*.txt" -o -name "*.pdf" \) -print
9. find . -name "*.txt" -exec rm {} \;
10.grep "class" . -R -n  .    -R 和 -r 不同。
11.grep -e "class" -e "vitural" file,匹配多种模式。
12.将多行输出转化为单行输出cat file.txt| xargs
   将单行转化为多行输出cat single.txt | xargs -n 3
13.消除重复行 sort unsort.txt | uniq ;
   统计各行在文件中出现的次数 sort unsort.txt | uniq -c;
   找出重复行sort unsort.txt | uniq -d
14.cat file | tr -d '0-9' // 删除所有数字
   echo 12345 | tr '0-9' '9876543210' //加解密转换，替换对应字符

15.sed -i 's/text/repalce_text/g' file ; -i 替换源文件。
   sed '/^$/d' file   
   第一个匹配的括号内容使用标记 \1 来引用
16.echo | awk ' {var1 = "v1" ; var2 = "V2"; var3="v3"; \
   print var1"-"var2"-"var3; }'
   v1-v2-v3
17. awk 'NR<=10{print}' filename  head功能。
18.seq 100 打印数。
19. cat c |(while read line;do echo $line;done)
   #!/bin/bash
   while read line;
   do 
     echo $line;
   done <c
迭代一行中的每一个单词：
for word in $line;
do 
echo $word;
done
迭代每一个字符：
${string:start_pos:num_of_chars}：从字符串中提取一个字符；
${#word}:返回变量word的长度
for((i=0;i<${#word};i++))
do
echo ${word:i:1);
done


20.shif +k man手册。Ctrl+l  相当于clear，清屏。
Ctrl+h  删除光标前的字符
Ctrl+w 删除光标前的一个单词。
Ctrl+a   移到命令行首
Ctrl+e    移到命令行尾
Ctrl+u   删除到行首的命令
Ctrl+k   删除到行尾的命令

21.set -v 将脚本执行的每一进程程序代码显示出来，一般用于shell排错
   set -x 将执行跟踪功能打开
22.*同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定*前边的内容可以连续重复使用任意次以使整个表达式得到匹配。因此，.*连在一起就意味着任意数量的不包含换行的字符。
23.  
24.截取前5个字符：${variable:0:5}
   cp文件    cp aa.txt{,_}
   $ free -m|grep cache|awk '/[0-9]/{print $4" MB"}'
  
  用”=”打印出横线:
  printf '%100s\n' | tr ' ' =
25. vim添加#：
   :%s/^/#/
26.[^] 匹配一个不在指定范围内的字符
27.sed 's#10#100#g' example-----不论什么字符，紧跟着s命令的都被认为是新的分隔符，所以，“#”在这里是分隔符
28.$ sed '/test/r file' example-----file里的内容被读进来，显示在与test匹配的行后面;
   $ sed -n '/test/w file' example-----在example中所有包含test的行都被写入file里。
   $ sed '/aaa/a\hhh' c   a\追加。
   $ sed '/aaa/i\hhh' c   i\追加到上面。
29. 在每一行后面增加一空行 sed G
    在每一行后面增加两行空行sed 'G;G'
30.# 计算行数 （模拟 "wc -l"） sed -n '$='
   $ sed -i -n '1~4p' file  保留file的1,5,9...行。
   $ sed '0~4d' file  删除4..行。
31.删除文件中的所有空行（与“grep '.' ”效果相同）
  sed '/^$/d'         # 方法1
  sed '/./!d'         # 方法2
-------------------------------------------------------
1.$ cat >nusers
  who |wc -l
  ^D                ctrl-D   end-of-file
  $ chmod +x nusers
  ./nusers
2. $ sh -x nusers  打开执行跟踪功能：显示每个被执行到的命令，并在之前添上“+”。
3.国际化：internationalization,缩写为i18n；本地化：localization,缩写为l10n.
4.egrep 扩展式的grep.(Extended grep),更强大的正则表达式，使用它的代价就是会消耗更多的运算资源。
5.正则表达式是由两个基本组成部分所建立：一般字符与特殊字符。特殊字符成为元字符（metacharacter）.
6. \{n,m\} 区间表达式（interval expression),匹配在它前面的单个字符重现的次数区间。
   \{n\}指的是重现n次；\{n,\}至少重现n次，而\{n,m\}为重现n至m次。
-------------------------------------------------------

1.case "$variable" in
  abc) echo "\$variable=abc" ;;
  xyz) echo "\$variable=xyz" ;;
  esac
2.:> data.xxx 清空文件
3.(cd /source/directory && tar cf - .)|(cd /dest/directory && tar xpvf - )
   '-'指定目标文件作为stdout.
   (...)一个子shell.
4.在""中还是会发生变量替换，这叫做部分引用，或叫弱引用；而在' '中就不会发生变量替换，这叫全引用，也叫强引用。
5.在[[]]结构中,将没有文件扩展或者是单词分离,但是会发生参数扩展和命令替换.
6.-f file是个regular文件（不是目录或者设备文件）
  -h 文件是个符号链接
  -L 文件是个符号链接
  -u set-user-id(suid)标识到文件上。如果运行一个具有root权限的文件，那么运行进程将取得root权限，即 使你是一个普通用户。
  -k 设置粘贴位，如果设置了这个标志，那么文件将被保存在交换区，为了达到快速存取的目的。如果设置在目录中，它将限制写权限。
   f1 -nt f2  文件f1比f2新
   f1 -ef f2  文件f1和f2都硬链接到同一个文件。
7.[ $# -eq 0 ] && directorys=`pwd` || directorys=$@
8. 混合比较 
   -a 逻辑与 
      exp1 -a exp2 如果exp1和exp2都为true的话，这个表达式为true
   -o 逻辑或
      exp1 -o exp2 






  








